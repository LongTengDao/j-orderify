/*!
 * 模块名称：@ltd/j-orderify
 * 模块功能：返回一个能保证给定对象的属性按此后添加顺序排列的 proxy，即使键名是 symbol，或整数 string。
   　　　　　Return a proxy for given object, which can guarantee own keys are in setting order, even if the key name is symbol or int string.
 * 模块版本：2.1.0
 * 许可条款：LGPL-3.0
 * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)
 * 问题反馈：https://GitHub.com/LongTengDao/j-orderify/issues
 * 项目主页：https://GitHub.com/LongTengDao/j-orderify/
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = global || self, global.orderify = factory());
}(this, function () { 'use strict';

    const version = '2.1.0';

    // @ts-ignore
    const { defineProperty, deleteProperty, ownKeys } = Reflect;
    const { create } = Object;
    const ownKeysKeepers = new WeakMap;
    const handlers = Object.create(null, {
        defineProperty: {
            value(target, key, descriptor) {
                if (defineProperty(target, key, descriptor)) {
                    ownKeysKeepers.get(target).add(key);
                    return true;
                }
                return false;
            }
        },
        deleteProperty: {
            value(target, key) {
                if (deleteProperty(target, key)) {
                    ownKeysKeepers.get(target).delete(key);
                    return true;
                }
                return false;
            }
        },
        ownKeys: {
            value(target) {
                return [...ownKeysKeepers.get(target)];
            }
        },
    });
    const orderify = (object) => {
        ownKeysKeepers.set(object, new Set(ownKeys(object)));
        return new Proxy(object, handlers);
    };
    class Orderified extends null {
        constructor() {
            const object = create(prototype);
            ownKeysKeepers.set(object, new Set);
            return new Proxy(object, handlers);
        }
    }
    const { prototype } = Orderified;
    delete prototype.constructor;
    Object.freeze(prototype);
    const _export = {
        version,
        orderify,
        Orderified,
        get default() { return this; },
    };

    return _export;

}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlcnNpb24/dGV4dCIsImV4cG9ydC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAnMi4xLjAnOyIsIi8vIEB0cy1pZ25vcmVcbmltcG9ydCB2ZXJzaW9uIGZyb20gJy4vdmVyc2lvbj90ZXh0JzsgLy8gUmVmbGVjdCwgV2Vha01hcCwgT2JqZWN0LCBTZXQsIFByb3h5XG5leHBvcnQgeyB2ZXJzaW9uIH07XG5jb25zdCB7IGRlZmluZVByb3BlcnR5LCBkZWxldGVQcm9wZXJ0eSwgb3duS2V5cyB9ID0gUmVmbGVjdDtcbmNvbnN0IHsgY3JlYXRlIH0gPSBPYmplY3Q7XG5jb25zdCBvd25LZXlzS2VlcGVycyA9IG5ldyBXZWFrTWFwO1xuY29uc3QgaGFuZGxlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwsIHtcbiAgICBkZWZpbmVQcm9wZXJ0eToge1xuICAgICAgICB2YWx1ZSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgaWYgKGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSkge1xuICAgICAgICAgICAgICAgIG93bktleXNLZWVwZXJzLmdldCh0YXJnZXQpLmFkZChrZXkpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkZWxldGVQcm9wZXJ0eToge1xuICAgICAgICB2YWx1ZSh0YXJnZXQsIGtleSkge1xuICAgICAgICAgICAgaWYgKGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSkge1xuICAgICAgICAgICAgICAgIG93bktleXNLZWVwZXJzLmdldCh0YXJnZXQpLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBvd25LZXlzOiB7XG4gICAgICAgIHZhbHVlKHRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIFsuLi5vd25LZXlzS2VlcGVycy5nZXQodGFyZ2V0KV07XG4gICAgICAgIH1cbiAgICB9LFxufSk7XG5leHBvcnQgY29uc3Qgb3JkZXJpZnkgPSAob2JqZWN0KSA9PiB7XG4gICAgb3duS2V5c0tlZXBlcnMuc2V0KG9iamVjdCwgbmV3IFNldChvd25LZXlzKG9iamVjdCkpKTtcbiAgICByZXR1cm4gbmV3IFByb3h5KG9iamVjdCwgaGFuZGxlcnMpO1xufTtcbmV4cG9ydCBjbGFzcyBPcmRlcmlmaWVkIGV4dGVuZHMgbnVsbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IG9iamVjdCA9IGNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgICBvd25LZXlzS2VlcGVycy5zZXQob2JqZWN0LCBuZXcgU2V0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eShvYmplY3QsIGhhbmRsZXJzKTtcbiAgICB9XG59XG5jb25zdCB7IHByb3RvdHlwZSB9ID0gT3JkZXJpZmllZDtcbmRlbGV0ZSBwcm90b3R5cGUuY29uc3RydWN0b3I7XG5PYmplY3QuZnJlZXplKHByb3RvdHlwZSk7XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgdmVyc2lvbixcbiAgICBvcmRlcmlmeSxcbiAgICBPcmRlcmlmaWVkLFxuICAgIGdldCBkZWZhdWx0KCkgeyByZXR1cm4gdGhpczsgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVY0Y0c5eWRDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4aFFVRmhPMEZCUTJJc1QwRkJUeXhQUVVGUExFMUJRVTBzWjBKQlFXZENMRU5CUVVNc1EwRkJRU3gxUTBGQmRVTTdRVUZETlVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETzBGQlJXNUNMRTFCUVUwc1JVRkJSU3hqUVVGakxFVkJRVVVzWTBGQll5eEZRVUZGTEU5QlFVOHNSVUZCUlN4SFFVRkhMRTlCUVU4c1EwRkJRenRCUVVNMVJDeE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZMRWRCUVVjc1RVRkJUU3hEUVVGRE8wRkJSVEZDTEUxQlFVMHNZMEZCWXl4SFFVRkhMRWxCUVVrc1QwRkJUeXhEUVVGRE8wRkJSVzVETEUxQlFVMHNVVUZCVVN4SFFVRlhMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTzBsQlF6VkRMR05CUVdNc1JVRkJSVHRSUVVObUxFdEJRVXNzUTBGQlJTeE5RVUZqTEVWQlFVVXNSMEZCYjBJc1JVRkJSU3hWUVVFNFFqdFpRVU14UlN4SlFVRkxMR05CUVdNc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEZWQlFWVXNRMEZCUXl4RlFVRkhPMmRDUVVNNVF5eGpRVUZqTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0blFrRkRjRU1zVDBGQlR5eEpRVUZKTEVOQlFVTTdZVUZEV2p0WlFVTkVMRTlCUVU4c1MwRkJTeXhEUVVGRE8xRkJRMlFzUTBGQlF6dExRVU5FTzBsQlEwUXNZMEZCWXl4RlFVRkZPMUZCUTJZc1MwRkJTeXhEUVVGRkxFMUJRV01zUlVGQlJTeEhRVUZ2UWp0WlFVTXhReXhKUVVGTExHTkJRV01zUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RFFVRkRMRVZCUVVjN1owSkJRMnhETEdOQlFXTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMmRDUVVOMlF5eFBRVUZQTEVsQlFVa3NRMEZCUXp0aFFVTmFPMWxCUTBRc1QwRkJUeXhMUVVGTExFTkJRVU03VVVGRFpDeERRVUZETzB0QlEwUTdTVUZEUkN4UFFVRlBMRVZCUVVVN1VVRkRVaXhMUVVGTExFTkJRVVVzVFVGQll6dFpRVU53UWl4UFFVRlBMRU5CUVVNc1IwRkJSeXhqUVVGakxFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRlRU1zUTBGQlF6dExRVU5FTzBOQlEwUXNRMEZCUXl4RFFVRkRPMEZCUlVnc1RVRkJUU3hEUVVGRExFMUJRVTBzVVVGQlVTeEhRVUZITEVOQlFVTXNUVUZCWXl4RlFVRlZMRVZCUVVVN1NVRkRiRVFzWTBGQll5eERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOeVJDeFBRVUZQTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU53UXl4RFFVRkRMRU5CUVVNN1FVRkZSaXhOUVVGTkxFOUJRVThzVlVGQlZ5eFRRVUZSTEVsQlFVazdTVUZEYmtNN1VVRkRReXhOUVVGTkxFMUJRVTBzUjBGQlZ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRla01zWTBGQll5eERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU53UXl4UFFVRlBMRWxCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTndReXhEUVVGRE8wTkJRMFE3UVVGRFJDeE5RVUZOTEVWQlFVVXNVMEZCVXl4RlFVRkZMRWRCUVVjc1ZVRkJWU3hEUVVGRE8wRkJRMnBETEU5QlFVOHNVMEZCVXl4RFFVRkRMRmRCUVZjc1EwRkJRenRCUVVNM1FpeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wRkJSWHBDTEdWQlFXVTdTVUZEWkN4UFFVRlBPMGxCUTFBc1VVRkJVVHRKUVVOU0xGVkJRVlU3U1VGRFZpeEpRVUZKTEU5QlFVOHNTMEZCVFN4UFFVRlBMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03UTBGREwwSXNRMEZCUXlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJRUIwY3kxcFoyNXZjbVZjYm1sdGNHOXlkQ0IyWlhKemFXOXVJR1p5YjIwZ0p5NHZkbVZ5YzJsdmJqOTBaWGgwSnpzdkx5QlNaV1pzWldOMExDQlhaV0ZyVFdGd0xDQlBZbXBsWTNRc0lGTmxkQ3dnVUhKdmVIbGNibVY0Y0c5eWRDQjdJSFpsY25OcGIyNGdmVHRjYmx4dVkyOXVjM1FnZXlCa1pXWnBibVZRY205d1pYSjBlU3dnWkdWc1pYUmxVSEp2Y0dWeWRIa3NJRzkzYmt0bGVYTWdmU0E5SUZKbFpteGxZM1E3WEc1amIyNXpkQ0I3SUdOeVpXRjBaU0I5SUQwZ1QySnFaV04wTzF4dVhHNWpiMjV6ZENCdmQyNUxaWGx6UzJWbGNHVnljeUE5SUc1bGR5QlhaV0ZyVFdGd08xeHVYRzVqYjI1emRDQm9ZVzVrYkdWeWN5QTZiMkpxWldOMElEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNMQ0I3WEc1Y2RHUmxabWx1WlZCeWIzQmxjblI1T2lCN1hHNWNkRngwZG1Gc2RXVWdLSFJoY21kbGRDQTZiMkpxWldOMExDQnJaWGtnT25OMGNtbHVaeUI4SUhONWJXSnZiQ3dnWkdWelkzSnBjSFJ2Y2lBNlVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtTQjdYRzVjZEZ4MFhIUnBaaUFvSUdSbFptbHVaVkJ5YjNCbGNuUjVLSFJoY21kbGRDd2dhMlY1TENCa1pYTmpjbWx3ZEc5eUtTQXBJSHRjYmx4MFhIUmNkRngwYjNkdVMyVjVjMHRsWlhCbGNuTXVaMlYwS0hSaGNtZGxkQ2t1WVdSa0tHdGxlU2s3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUIwY25WbE8xeHVYSFJjZEZ4MGZWeHVYSFJjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSY2RIMWNibHgwZlN4Y2JseDBaR1ZzWlhSbFVISnZjR1Z5ZEhrNklIdGNibHgwWEhSMllXeDFaU0FvZEdGeVoyVjBJRHB2WW1wbFkzUXNJR3RsZVNBNmMzUnlhVzVuSUh3Z2MzbHRZbTlzS1NCN1hHNWNkRngwWEhScFppQW9JR1JsYkdWMFpWQnliM0JsY25SNUtIUmhjbWRsZEN3Z2EyVjVLU0FwSUh0Y2JseDBYSFJjZEZ4MGIzZHVTMlY1YzB0bFpYQmxjbk11WjJWMEtIUmhjbWRsZENrdVpHVnNaWFJsS0d0bGVTazdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQjBjblZsTzF4dVhIUmNkRngwZlZ4dVhIUmNkRngwY21WMGRYSnVJR1poYkhObE8xeHVYSFJjZEgxY2JseDBmU3hjYmx4MGIzZHVTMlY1Y3pvZ2UxeHVYSFJjZEhaaGJIVmxJQ2gwWVhKblpYUWdPbTlpYW1WamRDa2dPaWdnYzNSeWFXNW5JSHdnYzNsdFltOXNJQ2xiWFNCN1hHNWNkRngwWEhSeVpYUjFjbTRnV3k0dUxtOTNia3RsZVhOTFpXVndaWEp6TG1kbGRDaDBZWEpuWlhRcFhUdGNibHgwWEhSOVhHNWNkSDBzWEc1OUtUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHOXlaR1Z5YVdaNUlEMGdLRzlpYW1WamRDQTZiMkpxWldOMEtTQTZiMkpxWldOMElEMCtJSHRjYmx4MGIzZHVTMlY1YzB0bFpYQmxjbk11YzJWMEtHOWlhbVZqZEN3Z2JtVjNJRk5sZENodmQyNUxaWGx6S0c5aWFtVmpkQ2twS1R0Y2JseDBjbVYwZFhKdUlHNWxkeUJRY205NGVTaHZZbXBsWTNRc0lHaGhibVJzWlhKektUdGNibjA3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJQY21SbGNtbG1hV1ZrSUdWNGRHVnVaSE1nYm5Wc2JDQjdYRzVjZEdOdmJuTjBjblZqZEc5eUlDZ3BJSHRjYmx4MFhIUmpiMjV6ZENCdlltcGxZM1FnT205aWFtVmpkQ0E5SUdOeVpXRjBaU2h3Y205MGIzUjVjR1VwTzF4dVhIUmNkRzkzYmt0bGVYTkxaV1Z3WlhKekxuTmxkQ2h2WW1wbFkzUXNJRzVsZHlCVFpYUXBPMXh1WEhSY2RISmxkSFZ5YmlCdVpYY2dVSEp2ZUhrb2IySnFaV04wTENCb1lXNWtiR1Z5Y3lrN1hHNWNkSDFjYm4xY2JtTnZibk4wSUhzZ2NISnZkRzkwZVhCbElIMGdQU0JQY21SbGNtbG1hV1ZrTzF4dVpHVnNaWFJsSUhCeWIzUnZkSGx3WlM1amIyNXpkSEoxWTNSdmNqdGNiazlpYW1WamRDNW1jbVZsZW1Vb2NISnZkRzkwZVhCbEtUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdlMXh1WEhSMlpYSnphVzl1TEZ4dVhIUnZjbVJsY21sbWVTeGNibHgwVDNKa1pYSnBabWxsWkN4Y2JseDBaMlYwSUdSbFptRjFiSFFnS0NrZ2V5QnlaWFIxY200Z2RHaHBjenNnZlN4Y2JuMDdYRzRpWFgwPSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG9CQUFlLE9BQU87O0lDQXRCO0FBQ0EsSUFFQSxNQUFNLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFDNUQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQztJQUMxQixNQUFNLGNBQWMsR0FBRyxJQUFJLE9BQU8sQ0FBQztJQUNuQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtJQUNyQyxJQUFJLGNBQWMsRUFBRTtJQUNwQixRQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRTtJQUN2QyxZQUFZLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLEVBQUU7SUFDekQsZ0JBQWdCLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BELGdCQUFnQixPQUFPLElBQUksQ0FBQztJQUM1QixhQUFhO0lBQ2IsWUFBWSxPQUFPLEtBQUssQ0FBQztJQUN6QixTQUFTO0lBQ1QsS0FBSztJQUNMLElBQUksY0FBYyxFQUFFO0lBQ3BCLFFBQVEsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7SUFDM0IsWUFBWSxJQUFJLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUU7SUFDN0MsZ0JBQWdCLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZELGdCQUFnQixPQUFPLElBQUksQ0FBQztJQUM1QixhQUFhO0lBQ2IsWUFBWSxPQUFPLEtBQUssQ0FBQztJQUN6QixTQUFTO0lBQ1QsS0FBSztJQUNMLElBQUksT0FBTyxFQUFFO0lBQ2IsUUFBUSxLQUFLLENBQUMsTUFBTSxFQUFFO0lBQ3RCLFlBQVksT0FBTyxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ25ELFNBQVM7SUFDVCxLQUFLO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDSCxJQUFPLE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxLQUFLO0lBQ3BDLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxJQUFJLE9BQU8sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQztBQUNGLElBQU8sTUFBTSxVQUFVLFNBQVMsSUFBSSxDQUFDO0lBQ3JDLElBQUksV0FBVyxHQUFHO0lBQ2xCLFFBQVEsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pDLFFBQVEsY0FBYyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUM1QyxRQUFRLE9BQU8sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzNDLEtBQUs7SUFDTCxDQUFDO0lBQ0QsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLFVBQVUsQ0FBQztJQUNqQyxPQUFPLFNBQVMsQ0FBQyxXQUFXLENBQUM7SUFDN0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN6QixvQkFBZTtJQUNmLElBQUksT0FBTztJQUNYLElBQUksUUFBUTtJQUNaLElBQUksVUFBVTtJQUNkLElBQUksSUFBSSxPQUFPLEdBQUcsRUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFO0lBQ2xDLENBQUMsQ0FBQzs7Ozs7Ozs7Iiwic291cmNlUm9vdCI6Ii4uLy4uL3NyYy8ifQ==