/*!
 * 模块名称：@ltd/j-orderify
 * 模块功能：返回一个能保证给定对象的属性按此后添加顺序排列的 proxy，即使键名是 symbol，或整数 string。
   　　　　　Return a proxy for given object, which can guarantee own keys are in setting order, even if the key name is symbol or int string.
 * 模块版本：2.0.0
 * 许可条款：LGPL-3.0
 * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)
 * 问题反馈：https://GitHub.com/LongTengDao/j-orderify/issues
 * 项目主页：https://GitHub.com/LongTengDao/j-orderify/
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = global || self, global.orderify = factory());
}(this, function () { 'use strict';

    const version = '2.0.0';

    // @ts-ignore
    const { defineProperty, deleteProperty, ownKeys } = Reflect;
    const { create } = Object;
    const ownKeysKeepers = new WeakMap;
    const handlers = Object.create(null, {
        defineProperty: {
            value(target, key, descriptor) {
                if (defineProperty(target, key, descriptor)) {
                    ownKeysKeepers.get(target).add(key);
                    return true;
                }
                return false;
            }
        },
        deleteProperty: {
            value(target, key) {
                if (deleteProperty(target, key)) {
                    ownKeysKeepers.get(target).delete(key);
                    return true;
                }
                return false;
            }
        },
        ownKeys: {
            value(target) {
                return [...ownKeysKeepers.get(target)];
            }
        },
    });
    const orderify = (object) => {
        ownKeysKeepers.set(object, new Set(ownKeys(object)));
        return new Proxy(object, handlers);
    };
    class Orderified extends null {
        constructor() {
            const object = create(null);
            ownKeysKeepers.set(object, new Set);
            return new Proxy(object, handlers);
        }
    }
    const _export = {
        version,
        orderify,
        Orderified,
        get default() { return this; },
    };

    return _export;

}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,